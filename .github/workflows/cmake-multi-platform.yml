# Copyright (c) 2021-2022-2023 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
#
# The peculiarity of this workflow is that assumes vcpkg stored as a submodule of this repository.
# The workflow runs on x64 and ARM platforms.
# Workflow steps:
# - Setup vcpkg and cache it on the GitHub Action cloud based cache.
# - Runs CMake with CMakePreset.json using a presest configuration
#   that leverages the vcpkg's toolchain file. This will automatically run vcpkg 
#   to install dependencies described by the vcpkg.json manifest file. 
#   This stage also runs vcpkg with Binary Caching leveraging GitHub Action cache to 
#   store the built packages artifacts, hence it will be a no-op if those are restored 
#   from cache (e.g., already previously built).
# - Finally builds the sources with Ninja, and tests as well.
name: hosted-ninja-vcpkg_submod-autocache
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
  schedule:
  - cron: '0 1 * * *'

jobs:
  linux:
    name: ubuntu-build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ubuntu-latest
    env:
      CMAKE_CXX_COMPILER: g++
      CMAKE_C_COMPILER: gcc
      CMAKE_MAKE_PROGRAM: ninja
    steps:
      - run: sudo apt install -y apt autoconf automake build-essential build-essential cmake cmake fcitx-libs-dev git gnome-desktop-testing libasound2-dev libaudio-dev libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavutil-dev libbz2-dev libdbus-1-dev libdecor-0-dev libdrm-dev libegl1-mesa-dev libfreetype-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev libibus-1.0-dev libjack-dev libmad0-dev libogg-dev libpipewire-0.3-dev libpng-dev libpulse-dev libsamplerate0-dev libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev libsmpeg-dev libsndio-dev libtool libudev-dev libvorbis-dev libwayland-dev libx11-dev libxcursor-dev libxext-dev libxfixes-dev libxi-dev libxkbcommon-dev libxrandr-dev libxss-dev lua5.4 make ninja-build ninja-build pkg-config zlib1g-dev
      - run: ninja --version
      - run: nasm -v
      
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: lukka/get-cmake@latest

      - name: Restore from cache and setup vcpkg executable and data files.
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'
          vcpkgDirectory: '${{ github.workspace }}/extlib/vcpkg'

      # Note: if the preset misses the "configuration", it is possible to explicitly select the
      # configuration with the additional `--config` flag, e.g.:
      #   buildPreset: 'ninja-vcpkg'
      #   buildPresetAdditionalArgs: "[`--config`, `Release`]"
      #   testPreset: 'ninja-vcpkg'
      #   testPresetAdditionalArgs: "[`--config`, `Release`]"
      - name: Run CMake+vcpkg+Ninja+CTest to build packages and generate/build/test the code.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          buildPreset: 'ninja-vcpkg-release'
  
  mac:
    name: macos-build
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]

    runs-on: macos-latest
    env:
      CMAKE_CXX_COMPILER: clang++
      CMAKE_C_COMPILER: clang
      CMAKE_MAKE_PROGRAM: ninja
    steps:
      - run: brew install ninja nasm cmake
      - run: ninja --version
      - run: nasm -v
      
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: lukka/get-cmake@latest

      - name: Restore from cache and setup vcpkg executable and data files.
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'
          vcpkgDirectory: '${{ github.workspace }}/extlib/vcpkg'

      # Note: if the preset misses the "configuration", it is possible to explicitly select the
      # configuration with the additional `--config` flag, e.g.:
      #   buildPreset: 'ninja-vcpkg'
      #   buildPresetAdditionalArgs: "[`--config`, `Release`]"
      #   testPreset: 'ninja-vcpkg'
      #   testPresetAdditionalArgs: "[`--config`, `Release`]"
      - name: Run CMake+vcpkg+Ninja+CTest to build packages and generate/build/test the code.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          buildPreset: 'ninja-vcpkg-release'
  
  windows:
    name: windows-build-msvc
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    runs-on: windows-latest
    
    env:
      CMAKE_CXX_COMPILER: cl
    steps:      
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: lukka/get-cmake@latest

      - name: Restore from cache and setup vcpkg executable and data files.
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'
          vcpkgDirectory: '${{ github.workspace }}/extlib/vcpkg'

      # Note: if the preset misses the "configuration", it is possible to explicitly select the
      # configuration with the additional `--config` flag, e.g.:
      #   buildPreset: 'ninja-vcpkg'
      #   buildPresetAdditionalArgs: "[`--config`, `Release`]"
      #   testPreset: 'ninja-vcpkg'
      #   testPresetAdditionalArgs: "[`--config`, `Release`]"
      - name: Run CMake+vcpkg+Ninja+CTest to build packages and generate/build/test the code.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          buildPreset: 'ninja-vcpkg-release'
  
  windows_msys2:
    name: windows-build-msys2
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    runs-on: windows-latest
    
    env:
      CMAKE_CXX_COMPILER: g++
      CMAKE_C_COMPILER: gcc
      CMAKE_MAKE_PROGRAM: ninja
    defaults:
        run:
            shell: msys2 {0}
          
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: true
          install: >-
            curl
            git
            cmake
            ninja
            base-devel 
            mingw-w64-x86_64-toolchain


      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Restore from cache and setup vcpkg executable and data files.
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'
          vcpkgDirectory: '${{ github.workspace }}/extlib/vcpkg'

      # Note: if the preset misses the "configuration", it is possible to explicitly select the
      # configuration with the additional `--config` flag, e.g.:
      #   buildPreset: 'ninja-vcpkg'
      #   buildPresetAdditionalArgs: "[`--config`, `Release`]"
      #   testPreset: 'ninja-vcpkg'
      #   testPresetAdditionalArgs: "[`--config`, `Release`]"
      - name: Run CMake+vcpkg+Ninja+CTest to build packages and generate/build/test the code.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          buildPreset: 'ninja-vcpkg-release'
